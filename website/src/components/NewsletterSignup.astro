---
/**
 * NewsletterSignup Component
 * Email subscription form for blog newsletter
 * Ready for integration with Mailchimp, ConvertKit, etc.
 */

import type { Locale } from '../utils/i18n';

interface Props {
  locale: Locale;
  variant?: 'inline' | 'boxed' | 'minimal';
}

const { locale, variant = 'boxed' } = Astro.props;

// Translations
const translations = {
  en: {
    heading: 'Get Equipment Financing Tips',
    subheading: 'Subscribe to receive expert guides on construction equipment financing, cash flow management, and business growth strategies.',
    emailPlaceholder: 'Enter your email',
    buttonText: 'Subscribe',
    privacy: 'We respect your privacy. Unsubscribe at any time.',
    success: 'Thank you for subscribing!',
    error: 'Please enter a valid email address'
  },
  zh: {
    heading: '获取融资贴士',
    subheading: '订阅以获取建筑设备融资、现金流管理和业务增长策略的专家指南。',
    emailPlaceholder: '输入您的电子邮件',
    buttonText: '订阅',
    privacy: '我们尊重您的隐私。随时取消订阅。',
    success: '感谢您的订阅！',
    error: '请输入有效的电子邮件地址'
  },
  ms: {
    heading: 'Dapatkan Tips Pembiayaan',
    subheading: 'Langgan untuk menerima panduan pakar tentang pembiayaan peralatan pembinaan, pengurusan aliran tunai, dan strategi pertumbuhan perniagaan.',
    emailPlaceholder: 'Masukkan e-mel anda',
    buttonText: 'Langgan',
    privacy: 'Kami menghormati privasi anda. Berhenti langganan bila-bila masa.',
    success: 'Terima kasih kerana melanggan!',
    error: 'Sila masukkan alamat e-mel yang sah'
  }
};

const t = translations[locale];
---

<div class={`newsletter-signup ${variant === 'inline' ? 'newsletter-inline' : variant === 'minimal' ? 'newsletter-minimal' : 'newsletter-boxed'}`}>
  {variant !== 'minimal' && (
    <div class="newsletter-header">
      <h3 class="text-2xl font-bold text-gray-900 mb-2">
        {t.heading}
      </h3>
      <p class="text-gray-600">
        {t.subheading}
      </p>
    </div>
  )}

  <form
    class="newsletter-form"
    data-locale={locale}
    novalidate
  >
    <div class="flex flex-col sm:flex-row gap-3">
      <div class="flex-1">
        <label for="newsletter-email" class="sr-only">Email address</label>
        <input
          type="email"
          id="newsletter-email"
          name="email"
          required
          placeholder={t.emailPlaceholder}
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
          aria-describedby="newsletter-error"
        />
        <p
          id="newsletter-error"
          class="newsletter-error text-sm text-red-600 mt-2 hidden"
          role="alert"
        >
          {t.error}
        </p>
      </div>

      <button
        type="submit"
        class="newsletter-submit-btn px-6 py-3 bg-secondary text-white rounded-lg font-semibold hover:bg-secondary-dark transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2"
      >
        <span class="submit-text">{t.buttonText}</span>
        <span class="loading-spinner hidden">
          <svg class="animate-spin h-5 w-5" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
        </span>
      </button>
    </div>

    <p class="text-xs text-gray-600 mt-3">
      {t.privacy}
    </p>

    <div class="newsletter-success hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
      <p class="text-green-800 flex items-center gap-2">
        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"/>
        </svg>
        {t.success}
      </p>
    </div>
  </form>
</div>

<style>
  .newsletter-boxed {
    @apply bg-primary-light rounded-xl p-8 border border-primary-dark/20;
  }

  .newsletter-inline {
    @apply bg-white p-6 rounded-lg border border-gray-200;
  }

  .newsletter-minimal {
    @apply bg-transparent;
  }

  .newsletter-header {
    @apply mb-6;
  }

  .loading-spinner svg {
    @apply inline-block;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const forms = document.querySelectorAll('.newsletter-form');

    forms.forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const emailInput = form.querySelector('input[name="email"]') as HTMLInputElement;
        const errorElement = form.querySelector('.newsletter-error');
        const successElement = form.querySelector('.newsletter-success');
        const submitBtn = form.querySelector('.newsletter-submit-btn') as HTMLButtonElement;
        const submitText = submitBtn.querySelector('.submit-text');
        const loadingSpinner = submitBtn.querySelector('.loading-spinner');

        // Reset states
        errorElement?.classList.add('hidden');
        successElement?.classList.add('hidden');
        emailInput?.classList.remove('border-red-500');

        // Validate email
        const email = emailInput?.value || '';
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

        if (!emailRegex.test(email)) {
          errorElement?.classList.remove('hidden');
          emailInput?.classList.add('border-red-500');
          emailInput?.focus();
          return;
        }

        // Show loading state
        submitBtn.disabled = true;
        submitText?.classList.add('hidden');
        loadingSpinner?.classList.remove('hidden');

        try {
          // Formspree integration
          // SETUP: Create account at formspree.io and replace YOUR_FORM_ID with your actual form ID
          const FORMSPREE_ENDPOINT = 'https://formspree.io/f/YOUR_FORM_ID';

          // For now, use a simple email forward to company email
          // Alternative: Set up Mailchimp, ConvertKit, or custom API endpoint
          const response = await fetch(FORMSPREE_ENDPOINT, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({
              email: email,
              locale: form.dataset.locale,
              subject: `Newsletter Subscription - ${form.dataset.locale?.toUpperCase()}`,
              message: `New newsletter subscription from ${email} (Language: ${form.dataset.locale})`
            })
          });

          if (!response.ok) {
            throw new Error('Subscription failed');
          }

          // Show success
          successElement?.classList.remove('hidden');
          emailInput.value = '';

          // Track event (Google Analytics, Facebook Pixel, etc.)
          if (typeof gtag !== 'undefined') {
            gtag('event', 'newsletter_signup', {
              event_category: 'engagement',
              event_label: form.dataset.locale
            });
          }

        } catch (error) {
          console.error('Newsletter subscription error:', error);
          errorElement?.classList.remove('hidden');
        } finally {
          // Reset button state
          submitBtn.disabled = false;
          submitText?.classList.remove('hidden');
          loadingSpinner?.classList.add('hidden');
        }
      });
    });
  });
</script>
