---
/**
 * TableOfContents Component
 * Auto-generates TOC from H2 and H3 headings
 * Sticky on desktop with active section highlighting
 */

import type { Locale } from '../utils/i18n';

interface Props {
  headings: { depth: number; slug: string; text: string }[];
  locale: Locale;
}

const { headings, locale } = Astro.props;

// Filter to only show H2 and H3
const tocHeadings = headings.filter(h => h.depth <= 3);

// Translations
const translations = {
  en: {
    title: 'Table of Contents',
    onThisPage: 'On this page'
  },
  zh: {
    title: '目录',
    onThisPage: '本页内容'
  },
  ms: {
    title: 'Kandungan',
    onThisPage: 'Dalam halaman ini'
  }
};

const t = translations[locale];
---

{tocHeadings.length > 0 && (
  <aside
    class="toc-container bg-background-card rounded-lg shadow-sm border border-gray-200 p-6 sticky top-24"
    aria-label="Table of contents"
  >
    <h2 class="text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2">
      <svg class="w-5 h-5 text-secondary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
      {t.title}
    </h2>

    <nav>
      <ul class="space-y-2 text-sm">
        {tocHeadings.map((heading) => (
          <li
            class={`toc-item ${heading.depth === 3 ? 'ml-4' : ''}`}
            data-heading-slug={heading.slug}
          >
            <a
              href={`#${heading.slug}`}
              class="toc-link block py-1.5 px-3 text-gray-600 hover:text-secondary hover:bg-primary-ultralight rounded transition-colors duration-200"
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </aside>
)}

<style>
  .toc-link.active {
    @apply text-secondary bg-primary-light font-medium;
  }

  @media (max-width: 1024px) {
    .toc-container {
      position: relative;
      top: 0;
    }
  }
</style>

<script>
  // Add active state to TOC links based on scroll position
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('.toc-link');
    const headings = document.querySelectorAll('article h2, article h3');

    // Create an intersection observer
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Remove active class from all links
            tocLinks.forEach(link => link.classList.remove('active'));

            // Add active class to corresponding link
            const id = entry.target.id;
            const activeLink = document.querySelector(`.toc-link[href="#${id}"]`);
            if (activeLink) {
              activeLink.classList.add('active');
            }
          }
        });
      },
      {
        rootMargin: '-100px 0px -80% 0px'
      }
    );

    // Observe all headings
    headings.forEach((heading) => {
      if (heading.id) {
        observer.observe(heading);
      }
    });

    // Smooth scroll for TOC links
    tocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');

        if (targetElement) {
          const offset = 100; // Account for sticky header
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - offset;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        }
      });
    });
  });
</script>
