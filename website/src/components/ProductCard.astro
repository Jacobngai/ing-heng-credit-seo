---
/**
 * ProductCard Component
 * Card for displaying equipment/product information with pricing
 */

import type { Locale } from '../utils/i18n';
import { t, formatCurrency } from '../utils/i18n';

interface Props {
  name: string;
  description: string;
  price?: number;
  monthlyPayment?: number;
  features?: string[];
  link?: string;
  lang: Locale;
  image?: string;
  badge?: string;
}

const {
  name,
  description,
  price,
  monthlyPayment,
  features = [],
  link,
  lang,
  image,
  badge,
} = Astro.props;
---

<div class="card h-full flex flex-col group">
  {/* Product Image */}
  {image && (
    <div class="relative aspect-[4/3] overflow-hidden">
      <img
        src={image}
        alt={name}
        class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300"
        loading="lazy"
      />
      {badge && (
        <span class="absolute top-4 right-4 badge badge-accent">
          {badge}
        </span>
      )}
    </div>
  )}

  <div class="card-body flex flex-col flex-grow">
    {/* Product Name */}
    <h3 class="text-2xl font-bold text-primary mb-2 group-hover:text-secondary transition-colors">
      {name}
    </h3>

    {/* Description */}
    <p class="text-gray-600 mb-4 leading-relaxed">
      {description}
    </p>

    {/* Pricing */}
    {(price || monthlyPayment) && (
      <div class="mb-4 p-4 bg-gray-50 rounded-lg">
        {price && (
          <div class="text-sm text-gray-500 mb-1">Total Price</div>
          <div class="text-2xl font-bold text-primary mb-2">
            {formatCurrency(price, lang)}
          </div>
        )}
        {monthlyPayment && (
          <div>
            <div class="text-sm text-gray-500">From</div>
            <div class="text-xl font-semibold text-secondary">
              {formatCurrency(monthlyPayment, lang)}<span class="text-sm text-gray-600">/month</span>
            </div>
          </div>
        )}
      </div>
    )}

    {/* Features List */}
    {features.length > 0 && (
      <ul class="space-y-2 mb-6 flex-grow">
        {features.map((feature) => (
          <li class="flex items-start space-x-2">
            <svg class="w-5 h-5 text-green-500 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
            </svg>
            <span class="text-sm text-gray-700">{feature}</span>
          </li>
        ))}
      </ul>
    )}

    {/* CTA Button */}
    {link && (
      <a
        href={link}
        class="btn btn-primary w-full text-center"
      >
        {t('common.getStarted', lang)}
      </a>
    )}
  </div>
</div>
