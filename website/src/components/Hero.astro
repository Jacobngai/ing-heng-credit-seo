---
/**
 * Hero Component
 * Large hero section with title, subtitle, CTAs, and background image
 */

import type { Locale } from '../utils/i18n';
import CTAButton from './CTAButton.astro';

interface Props {
  title: string;
  subtitle: string;
  ctaText?: string;
  ctaLink?: string;
  ctaSecondaryText?: string;
  ctaSecondaryLink?: string;
  backgroundImage?: string;
  lang: Locale;
  overlay?: boolean;
  trustSignals?: string[];
}

const {
  title,
  subtitle,
  ctaText,
  ctaLink,
  ctaSecondaryText,
  ctaSecondaryLink,
  backgroundImage = '/images/hero-bg.jpg',
  lang,
  overlay = true,
  trustSignals = [],
} = Astro.props;
---

<section
  class="relative hero overflow-hidden"
  style={backgroundImage ? `background-image: url('${backgroundImage}')` : undefined}
>
  <!-- Background Image (if provided) -->
  {backgroundImage && (
    <div class="absolute inset-0 z-0">
      <img
        src={backgroundImage}
        alt=""
        class="w-full h-full object-cover"
        loading="eager"
      />
    </div>
  )}

  <!-- Overlay -->
  {overlay && (
    <div class="absolute inset-0 bg-gradient-to-r from-primary/90 to-secondary/90 z-10"></div>
  )}

  <!-- Content -->
  <div class="container-custom relative z-20">
    <div class="max-w-4xl mx-auto text-center">
      <!-- Title -->
      <h1 class="text-white mb-6 animate-fade-in">
        {title}
      </h1>

      <!-- Subtitle -->
      <p class="text-xl md:text-2xl text-gray-100 mb-8 leading-relaxed animate-fade-in" style="animation-delay: 0.2s;">
        {subtitle}
      </p>

      <!-- CTAs -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-8 animate-fade-in" style="animation-delay: 0.4s;">
        {ctaText && ctaLink && (
          <CTAButton
            text={ctaText}
            link={ctaLink}
            variant="accent"
            size="large"
          />
        )}

        {ctaSecondaryText && ctaSecondaryLink && (
          <CTAButton
            text={ctaSecondaryText}
            link={ctaSecondaryLink}
            variant="outline-white"
            size="large"
          />
        )}
      </div>

      <!-- Trust Signals -->
      {trustSignals && trustSignals.length > 0 && (
        <div class="flex flex-wrap justify-center gap-6 text-white/90 animate-fade-in" style="animation-delay: 0.6s;">
          {trustSignals.map((signal) => (
            <div class="flex items-center space-x-2">
              <svg class="w-5 h-5 text-accent" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
              <span class="text-sm font-medium">{signal}</span>
            </div>
          ))}
        </div>
      )}
    </div>
  </div>

  <!-- Scroll Down Indicator (optional) -->
  <div class="absolute bottom-8 left-1/2 -translate-x-1/2 z-20 animate-bounce">
    <svg class="w-6 h-6 text-white/70" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3" />
    </svg>
  </div>
</section>

<style>
  .hero {
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
  }
</style>
