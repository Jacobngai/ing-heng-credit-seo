---
/**
 * RelatedPosts Component
 * Displays 3-4 related blog posts based on category or tags
 */

import { getCollection } from 'astro:content';
import BlogCard from './BlogCard.astro';
import type { Locale } from '../utils/i18n';

interface Props {
  currentSlug: string;
  locale: Locale;
  category?: string;
  tags?: string[];
  limit?: number;
}

const { currentSlug, locale, category, tags = [], limit = 3 } = Astro.props;

// Get all blog posts for the current locale
const allPosts = await getCollection('blogs', ({ data }) => {
  return data.locale === locale && !data.draft;
});

// Filter out current post and find related posts
const relatedPosts = allPosts
  .filter(post => post.slug !== currentSlug)
  .map(post => {
    // Calculate relevance score
    let score = 0;

    // Same category gets highest score
    if (category && post.data.category === category) {
      score += 10;
    }

    // Shared tags get points
    const sharedTags = tags.filter(tag =>
      post.data.tags.includes(tag)
    ).length;
    score += sharedTags * 3;

    // Same persona gets bonus
    if (post.data.persona && post.data.persona === tags[0]) {
      score += 5;
    }

    return { post, score };
  })
  .sort((a, b) => b.score - a.score)
  .slice(0, limit)
  .map(({ post }) => post);

// Translations
const translations = {
  en: {
    heading: 'Related Articles',
    readMore: 'Read Article'
  },
  zh: {
    heading: '相关文章',
    readMore: '阅读文章'
  },
  ms: {
    heading: 'Artikel Berkaitan',
    readMore: 'Baca Artikel'
  }
};

const t = translations[locale];
---

{relatedPosts.length > 0 && (
  <section class="bg-gray-50 py-12 lg:py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <h2 class="text-3xl font-bold text-gray-900 mb-8">
        {t.heading}
      </h2>

      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {relatedPosts.map(post => (
          <BlogCard
            title={post.data.title}
            description={post.data.description}
            slug={`/${locale}/blog/${post.slug}`}
            image={post.data.ogImage}
            publishDate={post.data.publishDate}
            category={post.data.category}
            readingTime={post.data.readingTime}
            author={post.data.author}
            locale={locale}
          />
        ))}
      </div>
    </div>
  </section>
)}
